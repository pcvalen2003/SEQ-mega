/*
 * sequencer-MEGA_v1.0 (sub clock version)
 *
 * Created: 14/1/2025 18:55:48
 * Author : Dell
 */ 

#include <avr/io.h>
#include "midi.h"

#define hold(); for(uint8_t i = 0; i < 255; i++) asm("nop");

enum{parado, corriendo, pre_start, count_init} estado = parado;

// Secuencia
#define MAX_seq 64
uint8_t seq[MAX_seq] = {58, 65, 70, 77, 58, 65, 70, 79};
uint8_t step = 0, step_end = 8;

void SEQ_step(){
	// verifico que el sequencer esté corriendo
	if(estado != corriendo)
		return;
		
	// apago la nota anterior
	if(seq[step] != 0)
		MIDI_send(MIDI_noteOFF, seq[step], 127);
	// avanzo el step
	step = (step + 1) % step_end;
	// mando el note on
	if(seq[step] != 0)
		MIDI_send(MIDI_noteON, seq[step], 127);
}

void SEQ_step_force(uint8_t step_f){
	// verifico que el sequencer esté corriendo
	if(estado != corriendo)
	return;
	
	// apago la nota anterior
	if(seq[step] != 0)
	MIDI_send(MIDI_noteOFF, seq[step], 127);
	// avanzo el step
	step = step_f % step_end;
	// mando el note on
	if(seq[step] != 0)
	MIDI_send(MIDI_noteON, seq[step], 127);
	
}

void SEQ_start(){
	// reseteo el step
	step = 0;
	// mando la primer nota
	if(seq[0] != 0)
		MIDI_send(MIDI_noteON, seq[0], 127);
	// aviso que está corriendo el sequencer
	estado = corriendo;
}

void SEQ_stop(){
	// apago la nota que estaba sonando
	if(seq[step] != 0)
		MIDI_send(MIDI_noteOFF, seq[step], 127);
	// aviso que el sequencer está parado
	estado = parado;
	// pongo el step en 0 para (posiblemente) arrancar a grabar de vuelta
	step = 0;
}


// Sub-divide clock
uint32_t beat = 0, last_beats = 0, beat_step = 0;
	// counter period = 10us
void Timer_init() {
	TCCR0A = (2 << WGM00);	// modo CTC con tope en OCR0A
//	TCCR0B = (2 << CS00);	// prescaler /8
	OCR0A = 20;
	TIMSK0 = (1 << OCIE0A);
}

#define sub_clock_stop()	TCCR0B = 0;
#define sub_clock_start()	TCCR0B = (2 << CS00);	beat = 0;
#define sub_clock_sample()	last_beats = beat;		beat = 0;

ISR(TIMER0_COMPA_vect){
	beat++;
}


// External clock source
uint8_t pD_latch = 0;
#define clock_ext (PIND & (1 << 3)) == 0 && (pD_latch & (1 << 3)) != 0
#define start_stop (PIND & (1 << 2)) == 0 && (pD_latch & (1 << 2)) != 0

Midi_msg mensaje;

void NuevoMIDI(){
	switch(estado){
		case parado:
			if((mensaje.byte0 & 0xf0) == MIDI_noteON){ // note ON
				seq[step++] = mensaje.byte1;
				step_end = step;
			}
			return;
			
		case corriendo:
		case pre_start:
		case count_init:
			MIDI_send(mensaje.byte0, mensaje.byte1, mensaje.byte2);
			return;
	}
	
}




int main(void)
{
	MIDI_init(&mensaje, NuevoMIDI);
	Timer_init();
	
	
	// pull-ups
	PORTD |= (1 << 2) | (1 << 3);
	// LED
	DDRB |= (1 << 5);
	
	while (1) {
		
		
		switch(estado){
			case parado:
				PORTB |= (1 << 5);
				
				if(clock_ext){
					seq[step++] = 0;
					step_end = step;
					hold();
				}
				if(start_stop){
					estado = pre_start;
					hold();
				}
				
				break;
				
				
			case pre_start:
				PORTB &= ~(1 << 5);
				
				if(clock_ext){
					sub_clock_start();
					estado = count_init;
					hold();
				}
				if(start_stop){
					estado = parado;
					hold();
				}
				
				break;
				
				
			case count_init:
				if(clock_ext && beat >= 20000){
					sub_clock_sample();
					SEQ_start();
				}
				if(start_stop){
					sub_clock_stop();
					estado = parado;
					hold();
				}
				
				break;
				
				
			case corriendo:
				PORTB &= ~(1 << 5);
				
				if(step < step_end && step < beat*step_end/last_beats && beat < last_beats){
					SEQ_step();
				}
				
				
				if(clock_ext && beat >= 20000){
					sub_clock_sample();
					SEQ_step_force(0);
				}
				if(start_stop){
					sub_clock_stop();
					SEQ_stop();
					hold();
				}
				
				break;
		}
		
		pD_latch = PIND; // para determinar si los botones YA ESTABAN apretados antes
		
		if(beat >= 400000){ // time-out
			SEQ_stop();
			sub_clock_stop();
			beat = 0;
		}
			
    }
}


